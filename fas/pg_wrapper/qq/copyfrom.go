// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: copyfrom.go

package qq

import (
	"context"
)

// iteratorForWriteMinutes implements pgx.CopyFromSource.
type iteratorForWriteMinutes struct {
	rows                 []WriteMinutesParams
	skippedFirstNextCall bool
}

func (r *iteratorForWriteMinutes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForWriteMinutes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TickerID,
		r.rows[0].Starttime,
		r.rows[0].Open,
		r.rows[0].High,
		r.rows[0].Close,
		r.rows[0].Low,
		r.rows[0].Volume,
	}, nil
}

func (r iteratorForWriteMinutes) Err() error {
	return nil
}

func (q *Queries) WriteMinutes(ctx context.Context, arg []WriteMinutesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"klines"}, []string{"ticker_id", "starttime", "open", "high", "close", "low", "volume"}, &iteratorForWriteMinutes{rows: arg})
}

// iteratorForWriteOHCLV implements pgx.CopyFromSource.
type iteratorForWriteOHCLV struct {
	rows                 []WriteOHCLVParams
	skippedFirstNextCall bool
}

func (r *iteratorForWriteOHCLV) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForWriteOHCLV) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TickerID,
		r.rows[0].Resolution,
		r.rows[0].Starttime,
		r.rows[0].Open,
		r.rows[0].High,
		r.rows[0].Close,
		r.rows[0].Low,
		r.rows[0].Volume,
	}, nil
}

func (r iteratorForWriteOHCLV) Err() error {
	return nil
}

func (q *Queries) WriteOHCLV(ctx context.Context, arg []WriteOHCLVParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"klines"}, []string{"ticker_id", "resolution", "starttime", "open", "high", "close", "low", "volume"}, &iteratorForWriteOHCLV{rows: arg})
}
