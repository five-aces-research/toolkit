// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: 03_klinesadv.sql

package qq

import (
	"context"
)

const readMinutes = `-- name: ReadMinutes :many
SELECT starttime, open, high, close, low, volume
FROM klines
WHERE ticker_id = $1
  AND starttime > $2
  AND starttime < $3
ORDER BY starttime asc
`

type ReadMinutesParams struct {
	TickerID int32 `json:"ticker_id"`
	St       int64 `json:"st"`
	Et       int64 `json:"et"`
}

type ReadMinutesRow struct {
	Starttime int64   `json:"starttime"`
	Open      float64 `json:"open"`
	High      float64 `json:"high"`
	Close     float64 `json:"close"`
	Low       float64 `json:"low"`
	Volume    float64 `json:"volume"`
}

func (q *Queries) ReadMinutes(ctx context.Context, arg ReadMinutesParams) ([]ReadMinutesRow, error) {
	rows, err := q.db.Query(ctx, readMinutes, arg.TickerID, arg.St, arg.Et)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadMinutesRow
	for rows.Next() {
		var i ReadMinutesRow
		if err := rows.Scan(
			&i.Starttime,
			&i.Open,
			&i.High,
			&i.Close,
			&i.Low,
			&i.Volume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type WriteMinutesParams struct {
	TickerID  int32   `json:"ticker_id"`
	Starttime int64   `json:"starttime"`
	Open      float64 `json:"open"`
	High      float64 `json:"high"`
	Close     float64 `json:"close"`
	Low       float64 `json:"low"`
	Volume    float64 `json:"volume"`
}
